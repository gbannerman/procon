{"version":3,"sources":["state/reasons.ts","state/stateUtils.ts","state/index.ts","reasons/ReasonForm.tsx","hooks/useInput.ts","reasons/ReasonColumn.tsx","svg/AtomSVG.tsx","header/Header.tsx","svg/ThumbsUpSVG.tsx","svg/ThumbsDownSVG.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypes","createAction","type","payload","undefined","ReasonActions","pro","ADD_PRO","con","ADD_CON","initialState","pros","cons","state","reasons","arguments","length","action","Object","objectSpread","concat","toConsumableArray","rootReducer","combineReducers","ReasonForm","_ref","onSubmit","className","submitButtonIcon","_useInput","initialValue","_useState","useState","_useState2","slicedToArray","value","setValue","reset","bind","onChange","e","target","useInput","reasonText","bindReasonText","resetReasonText","handleSubmit","event","preventDefault","id","text","react_default","a","createElement","assign","placeholder","onClick","ReasonColumn","title","formOnSubmit","formButtonIcon","map","reason","key","src_reasons_ReasonForm","AtomSVG","props","viewBox","d","Header","svg_AtomSVG","ThumbsUpSVG","ThumbsDownSVG","App","useSelector","dispatch","useDispatch","src_header_Header","src_reasons_ReasonColumn","svg_ThumbsUpSVG","svg_ThumbsDownSVG","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a3266e3.chunk.js","sourcesContent":["import { Reason } from '../models/Reason';\nimport { createAction, ActionsUnion } from './stateUtils';\n\nexport enum ActionTypes {\n  ADD_PRO = 'procon/reasons/ADD_PRO',\n  ADD_CON = 'procon/reasons/ADD_CON'\n}\n\nexport const ReasonActions = {\n  addPro: (pro: Reason) => createAction(ActionTypes.ADD_PRO, pro),\n  addCon: (con: Reason) => createAction(ActionTypes.ADD_CON, con)\n}\n\nexport type ReasonActions = ActionsUnion<typeof ReasonActions>\n\nexport interface ReasonState {\n  pros: Reason[];\n  cons: Reason[];\n}\n\nconst initialState: ReasonState = {\n  pros: [],\n  cons: []\n}\n\nexport const reasonReducer = (state = initialState, action: ReasonActions): ReasonState => {\n  switch (action.type) {\n    case ActionTypes.ADD_PRO:\n      return {\n        ...state,\n        pros: [...state.pros, action.payload]\n      }\n    case ActionTypes.ADD_CON:\n      return {\n        ...state,\n        cons: [...state.cons, action.payload]\n      }\n    default: return state;\n  }\n}","type FunctionType = (...args: any[]) => any;\ninterface ActionCreatorsMapObject { [actionCreator: string]: FunctionType }\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\n\nexport interface Action<T extends string> {\n  type: T;\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n  payload: P;\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P>(type: T, payload: P): ActionWithPayload<T, P>\nexport function createAction<T extends string, P>(type: T, payload?: P) {\n  return payload === undefined ? { type } : { type, payload };\n}","import { combineReducers } from 'redux';\nimport { reasonReducer } from './reasons';\n\nconst state = {\n  reasons: reasonReducer\n};\n\nexport const rootReducer = combineReducers(state);\n\nexport type AppState = ReturnType<typeof rootReducer>","import React, { SyntheticEvent } from 'react';\nimport './ReasonForm.scss';\nimport { useInput } from '../hooks/useInput';\nimport { Reason } from '../models/Reason';\n\ninterface ReasonFormProps {\n  onSubmit: (reason: Reason) => void;\n  submitButtonIcon: React.ReactNode;\n  className: string;\n}\n\nconst ReasonForm: React.FC<ReasonFormProps> = ({onSubmit, className, submitButtonIcon}) => {\n  const { value: reasonText, bind: bindReasonText, reset: resetReasonText } = useInput('');\n\n  const handleSubmit = (event: SyntheticEvent) => {\n    event.preventDefault();\n    if (reasonText) {\n      onSubmit({ id: 0, text: reasonText });\n      resetReasonText();\n    }\n  }\n\n  return (\n    <form className={`ReasonForm ${className}`} onSubmit={handleSubmit}>\n      <input className=\"ReasonForm__text\" placeholder=\"Reason\" type=\"text\" {...bindReasonText} />\n      <button className=\"ReasonForm__submit\" onClick={handleSubmit}>{ submitButtonIcon }</button>\n    </form>\n  );\n}\n\nexport default ReasonForm;\n","import { useState, SyntheticEvent } from 'react';\n\nexport const useInput = (initialValue: string) => {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(''),\n    bind: {\n      value,\n      onChange: (e: SyntheticEvent) => {\n        setValue((e.target as HTMLInputElement).value);\n      }\n    }\n  };\n};","import React from 'react';\nimport { Reason } from '../models/Reason';\nimport ReasonForm from './ReasonForm';\nimport './ReasonColumn.scss';\n\ninterface ReasonColumnProps {\n  className: string;\n  title: string;\n  reasons: Reason[];\n  formOnSubmit: (reason: Reason) => void;\n  formButtonIcon: React.ReactNode;\n}\n\nconst ReasonColumn: React.FC<ReasonColumnProps> = ({className, title, reasons, formOnSubmit, formButtonIcon}) => {\n\n  return (\n    <div className={`column ${className}`}>\n      <div className=\"column__title\">{ title }</div>\n      {\n        reasons.map((reason) => <p key={reason.id}>{ reason.text }</p>)\n      }\n      <ReasonForm onSubmit={formOnSubmit} submitButtonIcon={formButtonIcon} className={className} />\n    </div>\n  );\n}\n\nexport default ReasonColumn;\n","import React from 'react';\n\nconst AtomSVG: React.FC<React.HTMLProps<SVGSVGElement>> = (props) => {\n\n  return (\n    <svg  {...props} viewBox=\"0 0 24 24\">\n      <path d=\"M12,11A1,1 0 0,1 13,12A1,1 0 0,1 12,13A1,1 0 0,1 11,12A1,1 0 0,1 12,11M4.22,4.22C5.65,2.79 8.75,3.43 12,5.56C15.25,3.43 18.35,2.79 19.78,4.22C21.21,5.65 20.57,8.75 18.44,12C20.57,15.25 21.21,18.35 19.78,19.78C18.35,21.21 15.25,20.57 12,18.44C8.75,20.57 5.65,21.21 4.22,19.78C2.79,18.35 3.43,15.25 5.56,12C3.43,8.75 2.79,5.65 4.22,4.22M15.54,8.46C16.15,9.08 16.71,9.71 17.23,10.34C18.61,8.21 19.11,6.38 18.36,5.64C17.62,4.89 15.79,5.39 13.66,6.77C14.29,7.29 14.92,7.85 15.54,8.46M8.46,15.54C7.85,14.92 7.29,14.29 6.77,13.66C5.39,15.79 4.89,17.62 5.64,18.36C6.38,19.11 8.21,18.61 10.34,17.23C9.71,16.71 9.08,16.15 8.46,15.54M5.64,5.64C4.89,6.38 5.39,8.21 6.77,10.34C7.29,9.71 7.85,9.08 8.46,8.46C9.08,7.85 9.71,7.29 10.34,6.77C8.21,5.39 6.38,4.89 5.64,5.64M9.88,14.12C10.58,14.82 11.3,15.46 12,16.03C12.7,15.46 13.42,14.82 14.12,14.12C14.82,13.42 15.46,12.7 16.03,12C15.46,11.3 14.82,10.58 14.12,9.88C13.42,9.18 12.7,8.54 12,7.97C11.3,8.54 10.58,9.18 9.88,9.88C9.18,10.58 8.54,11.3 7.97,12C8.54,12.7 9.18,13.42 9.88,14.12M18.36,18.36C19.11,17.62 18.61,15.79 17.23,13.66C16.71,14.29 16.15,14.92 15.54,15.54C14.92,16.15 14.29,16.71 13.66,17.23C15.79,18.61 17.62,19.11 18.36,18.36Z\" />\n    </svg>\n  );\n}\n\nexport default AtomSVG;\n","import React from 'react';\nimport AtomSVG from '../svg/AtomSVG';\nimport './Header.scss';\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"Header\">\n      <AtomSVG className=\"Header__icon\" />\n      <h1 className=\"Header__title\">Procon</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nconst ThumbsUpSVG: React.FC<React.HTMLProps<SVGSVGElement>> = (props) => {\n\n  return (\n    <svg  {...props} viewBox=\"0 0 24 24\">\n      <path d=\"M5,9V21H1V9H5M9,21A2,2 0 0,1 7,19V9C7,8.45 7.22,7.95 7.59,7.59L14.17,1L15.23,2.06C15.5,2.33 15.67,2.7 15.67,3.11L15.64,3.43L14.69,8H21C22.11,8 23,8.9 23,10V12C23,12.26 22.95,12.5 22.86,12.73L19.84,19.78C19.54,20.5 18.83,21 18,21H9M9,19H18.03L21,12V10H12.21L13.34,4.68L9,9.03V19Z\" />\n    </svg>\n  );\n}\n\nexport default ThumbsUpSVG;\n","import React from 'react';\n\nconst ThumbsDownSVG: React.FC<React.HTMLProps<SVGSVGElement>> = (props) => {\n\n  return (\n    <svg  {...props} viewBox=\"0 0 24 24\">\n      <path d=\"M19,15V3H23V15H19M15,3A2,2 0 0,1 17,5V15C17,15.55 16.78,16.05 16.41,16.41L9.83,23L8.77,21.94C8.5,21.67 8.33,21.3 8.33,20.88L8.36,20.57L9.31,16H3C1.89,16 1,15.1 1,14V12C1,11.74 1.05,11.5 1.14,11.27L4.16,4.22C4.46,3.5 5.17,3 6,3H15M15,5H5.97L3,12V14H11.78L10.65,19.32L15,14.97V5Z\" />\n    </svg>\n  );\n}\n\nexport default ThumbsDownSVG;","import React from 'react';\nimport ReasonColumn from '../reasons/ReasonColumn';\nimport { Reason } from '../models/Reason';\nimport Header from '../header/Header';\nimport ThumbsUpSVG from '../svg/ThumbsUpSVG';\nimport ThumbsDownSVG from '../svg/ThumbsDownSVG';\nimport './App.scss';\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ReasonActions } from '../state/reasons';\nimport { AppState } from '../state/index';\n\nconst App: React.FC = () => {\n  const pros = useSelector((state: AppState) => state.reasons.pros);\n  const cons = useSelector((state: AppState) => state.reasons.cons);\n  const dispatch = useDispatch();\n\n  const addPro = (pro: Reason) => {\n    dispatch(ReasonActions.addPro({ ...pro, id: pros.length + 1 }));\n  }\n\n  const addCon = (con: Reason) => {\n    dispatch(ReasonActions.addCon({ ...con, id: cons.length + 1 }));\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"App__content\">\n        <div className=\"App__content__decision\">\n          <input type=\"text\" placeholder=\"Should I order a pizza tonight?\" />\n        </div>\n        <div className=\"App__content__pros-cons-container\">\n          <ReasonColumn\n            className= \"pros\"\n            title=\"Pros\"\n            reasons={pros}\n            formOnSubmit={addPro}\n            formButtonIcon={<ThumbsUpSVG />}\n          />\n          <ReasonColumn\n            className= \"cons\"\n            title=\"Cons\"\n            reasons={cons}\n            formOnSubmit={addCon}\n            formButtonIcon={<ThumbsDownSVG />}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux'\nimport { rootReducer } from './state/index';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
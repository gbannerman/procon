{"version":3,"sources":["reasons/ReasonForm.tsx","hooks/useInput.ts","reasons/ReasonColumn.tsx","svg/AtomSVG.tsx","header/Header.tsx","svg/ThumbsUpSVG.tsx","svg/ThumbsDownSVG.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["ReasonForm","_ref","onSubmit","className","submitButtonIcon","_useInput","initialValue","_useState","useState","_useState2","Object","slicedToArray","value","setValue","reset","bind","onChange","e","target","useInput","reasonText","bindReasonText","resetReasonText","handleSubmit","event","preventDefault","id","text","react_default","a","createElement","concat","assign","placeholder","type","onClick","ReasonColumn","children","title","reasons","formOnSubmit","formButtonIcon","map","reason","key","src_reasons_ReasonForm","AtomSVG","props","viewBox","d","Header","svg_AtomSVG","ThumbsUpSVG","ThumbsDownSVG","App","pros","setPros","_useState3","_useState4","cons","setCons","src_header_Header","src_reasons_ReasonColumn","pro","toConsumableArray","objectSpread","length","svg_ThumbsUpSVG","con","svg_ThumbsDownSVG","Boolean","window","location","hostname","match","ReactDOM","render","src_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c955feef.chunk.js","sourcesContent":["import React, { SyntheticEvent } from 'react';\r\nimport './ReasonForm.scss';\r\nimport { useInput } from '../hooks/useInput';\r\nimport { Reason } from '../models/Reason';\r\nimport 'react-dates/lib/css/_datepicker.css';\r\n\r\ninterface ReasonFormProps {\r\n  onSubmit: (reason: Reason) => void;\r\n  submitButtonIcon: React.ReactNode;\r\n  className: string;\r\n}\r\n\r\nconst ReasonForm: React.FC<ReasonFormProps> = ({onSubmit, className, submitButtonIcon}) => {\r\n  const { value: reasonText, bind: bindReasonText, reset: resetReasonText } = useInput('');\r\n\r\n  const handleSubmit = (event: SyntheticEvent) => {\r\n    event.preventDefault();\r\n    if (reasonText) {\r\n      onSubmit({ id: 0, text: reasonText });\r\n      resetReasonText();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className={`ReasonForm ${className}`} onSubmit={handleSubmit}>\r\n      <input className=\"ReasonForm__text\" placeholder=\"Reason\" type=\"text\" {...bindReasonText} />\r\n      <button className=\"ReasonForm__submit\" onClick={handleSubmit}>{ submitButtonIcon }</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ReasonForm;\r\n","import { useState, SyntheticEvent } from \"react\";\r\n\r\nexport const useInput = (initialValue: string) => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    reset: () => setValue(''),\r\n    bind: {\r\n      value,\r\n      onChange: (e: SyntheticEvent) => {\r\n        setValue((e.target as HTMLInputElement).value);\r\n      }\r\n    }\r\n  };\r\n};","import React from 'react';\r\nimport { Reason } from '../models/Reason';\r\nimport ReasonForm from './ReasonForm';\r\nimport './ReasonColumn.scss';\r\n\r\ninterface ReasonColumnProps {\r\n  children: {\r\n    className: string;\r\n    title: string;\r\n    reasons: Reason[];\r\n    formOnSubmit: (reason: Reason) => void;\r\n    formButtonIcon: React.ReactNode;\r\n  }\r\n}\r\n\r\nconst ReasonColumn: React.FC<ReasonColumnProps> = ({children}) => {\r\n\r\n  const {className, title, reasons, formOnSubmit, formButtonIcon} = children;\r\n\r\n  return (\r\n    <div className={`column ${className}`}>\r\n      <div className=\"column__title\">{ title }</div>\r\n      {\r\n        reasons.map((reason) => <p key={reason.id}>{ reason.text }</p>)\r\n      }\r\n      <ReasonForm onSubmit={formOnSubmit} submitButtonIcon={formButtonIcon} className={className} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReasonColumn;\r\n","import React from 'react';\r\n\r\nconst AtomSVG: React.FC<React.HTMLProps<SVGSVGElement>> = (props) => {\r\n\r\n  return (\r\n    <svg  {...props} viewBox=\"0 0 24 24\">\r\n      <path d=\"M12,11A1,1 0 0,1 13,12A1,1 0 0,1 12,13A1,1 0 0,1 11,12A1,1 0 0,1 12,11M4.22,4.22C5.65,2.79 8.75,3.43 12,5.56C15.25,3.43 18.35,2.79 19.78,4.22C21.21,5.65 20.57,8.75 18.44,12C20.57,15.25 21.21,18.35 19.78,19.78C18.35,21.21 15.25,20.57 12,18.44C8.75,20.57 5.65,21.21 4.22,19.78C2.79,18.35 3.43,15.25 5.56,12C3.43,8.75 2.79,5.65 4.22,4.22M15.54,8.46C16.15,9.08 16.71,9.71 17.23,10.34C18.61,8.21 19.11,6.38 18.36,5.64C17.62,4.89 15.79,5.39 13.66,6.77C14.29,7.29 14.92,7.85 15.54,8.46M8.46,15.54C7.85,14.92 7.29,14.29 6.77,13.66C5.39,15.79 4.89,17.62 5.64,18.36C6.38,19.11 8.21,18.61 10.34,17.23C9.71,16.71 9.08,16.15 8.46,15.54M5.64,5.64C4.89,6.38 5.39,8.21 6.77,10.34C7.29,9.71 7.85,9.08 8.46,8.46C9.08,7.85 9.71,7.29 10.34,6.77C8.21,5.39 6.38,4.89 5.64,5.64M9.88,14.12C10.58,14.82 11.3,15.46 12,16.03C12.7,15.46 13.42,14.82 14.12,14.12C14.82,13.42 15.46,12.7 16.03,12C15.46,11.3 14.82,10.58 14.12,9.88C13.42,9.18 12.7,8.54 12,7.97C11.3,8.54 10.58,9.18 9.88,9.88C9.18,10.58 8.54,11.3 7.97,12C8.54,12.7 9.18,13.42 9.88,14.12M18.36,18.36C19.11,17.62 18.61,15.79 17.23,13.66C16.71,14.29 16.15,14.92 15.54,15.54C14.92,16.15 14.29,16.71 13.66,17.23C15.79,18.61 17.62,19.11 18.36,18.36Z\" />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default AtomSVG;\r\n","import React from 'react';\r\nimport AtomSVG from '../svg/AtomSVG';\r\nimport './Header.scss';\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <header className=\"Header\">\r\n      <AtomSVG className=\"Header__icon\" />\r\n      <h1 className=\"Header__title\">Procon</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst ThumbsUpSVG: React.FC<React.HTMLProps<SVGSVGElement>> = (props) => {\r\n\r\n  return (\r\n    <svg  {...props} viewBox=\"0 0 24 24\">\r\n      <path d=\"M5,9V21H1V9H5M9,21A2,2 0 0,1 7,19V9C7,8.45 7.22,7.95 7.59,7.59L14.17,1L15.23,2.06C15.5,2.33 15.67,2.7 15.67,3.11L15.64,3.43L14.69,8H21C22.11,8 23,8.9 23,10V12C23,12.26 22.95,12.5 22.86,12.73L19.84,19.78C19.54,20.5 18.83,21 18,21H9M9,19H18.03L21,12V10H12.21L13.34,4.68L9,9.03V19Z\" />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default ThumbsUpSVG;\r\n","import React from 'react';\r\n\r\nconst ThumbsDownSVG: React.FC<React.HTMLProps<SVGSVGElement>> = (props) => {\r\n\r\n  return (\r\n    <svg  {...props} viewBox=\"0 0 24 24\">\r\n      <path d=\"M19,15V3H23V15H19M15,3A2,2 0 0,1 17,5V15C17,15.55 16.78,16.05 16.41,16.41L9.83,23L8.77,21.94C8.5,21.67 8.33,21.3 8.33,20.88L8.36,20.57L9.31,16H3C1.89,16 1,15.1 1,14V12C1,11.74 1.05,11.5 1.14,11.27L4.16,4.22C4.46,3.5 5.17,3 6,3H15M15,5H5.97L3,12V14H11.78L10.65,19.32L15,14.97V5Z\" />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default ThumbsDownSVG;","import React, { useState } from 'react';\r\nimport ReasonColumn from '../reasons/ReasonColumn';\r\nimport { Reason } from '../models/Reason';\r\nimport Header from '../header/Header';\r\nimport ThumbsUpSVG from '../svg/ThumbsUpSVG';\r\nimport ThumbsDownSVG from '../svg/ThumbsDownSVG';\r\nimport './App.scss';\r\n\r\nconst App: React.FC = () => {\r\n  const [pros, setPros] = useState<Reason[]>([]);\r\n  const [cons, setCons] = useState<Reason[]>([]);\r\n\r\n  const addPro = (pro: Reason) => {\r\n    setPros([...pros, { ...pro, id: pros.length }]);\r\n  }\r\n\r\n  const addCon = (con: Reason) => {\r\n    setCons([...cons, { ...con, id: cons.length }]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"App__content\">\r\n        <div className=\"App__content__decision\">\r\n          <input type=\"text\" placeholder=\"Should I order a pizza tonight?\" />\r\n        </div>\r\n        <div className=\"App__content__pros-cons-container\">\r\n          <ReasonColumn>\r\n            {{\r\n              className: \"pros\",\r\n              title: \"Pros\",\r\n              reasons: pros,\r\n              formOnSubmit: addPro,\r\n              formButtonIcon: <ThumbsUpSVG />\r\n            }}\r\n          </ReasonColumn>\r\n          <ReasonColumn>\r\n            {{\r\n              className: \"cons\",\r\n              title: \"Cons\",\r\n              reasons: cons,\r\n              formOnSubmit: addCon,\r\n              formButtonIcon: <ThumbsDownSVG />\r\n            }}\r\n          </ReasonColumn>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}